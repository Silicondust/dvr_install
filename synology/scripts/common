#!/bin/sh

### This script will be executed when package installed and upgraded.
### Actions after package installed.
### ex. create database, create symbolic link...


#Useful Environment Variables
# SYNOPKG_PKGNAME     - Package Name from INFO
# SYNOPKG_PKGVER      - Package Version from INFO
# SYNOPKG_PKGDEST     - Target directory for storage of the package
# SYNOPKG_PKGDEST_VOL - Target Volume where package is stored
# SYNOPKG_PKGPORT     - Admin Port as defined in INFO

# SYNOPKG_TEMP_UPGRADE_FOLDER - Temp folder for moving data to/from between preupgrade and postupgrade
# SYNOPKG_TEMP_LOGFILE        - Temporary logfile for scripts to log to

# SYNOLOGY COMMANDS
SYNO_USER=/usr/syno/sbin/synouser
SYNO_SHARE=/usr/syno/sbin/synoshare

LogPrefix="HDHomeRunDVR: "
hdhr_web_path="$SYNOPKG_PKGDEST/web"
hdhr_bin_path="$SYNOPKG_PKGDEST/bin"
hdhr_etc_path="$SYNOPKG_PKGDEST/etc"
syno_web_path="/var/services/web/HDHomeRunDVR"
CURR_USER=`id -u`

# Download URLs from Silicondust - Shouldn't change much
DownloadURL=https://download.silicondust.com/hdhomerun/hdhomerun_record_linux
BetaURL=https://download.silicondust.com/hdhomerun/hdhomerun_record_linux_beta

# Some additional params you can change
DVRBin=hdhomerun_record

hdhr_log="/tmp/hdhomerundvr_install.log"
hdhr_bin="hdhomerun_record"
hdhr_conf="HDHomeRunDVR.conf"
hdhr_user="hdhomerundvr"
http_grp="http"

create_dvr_user() {
  echo "$LogPrefix ** Create DVR User " >> $hdhr_log
	echo "$LogPrefix Creating DVR user $hdhr_user" >> $hdhr_log
	$SYNO_USER --add $hdhr_user "" "" 1 "" 0
}

delete_dvr_user() {
  echo "$LogPrefix ** Removing DVR User" >> $hdhr_log
	echo "$LogPrefix Removing DVR user $hdhr_user" >> $hdhr_log
	$SYNO_USER --del $hdhr_user
}


create_web_ui() {
  echo "$LogPrefix ** Create and Copy Web UI " >> $hdhr_log
	cp -R $hdhr_web_path $syno_web_path
	chown -R http:http $syno_web_path
	chmod -R 755 $syno_web_path
}

delete_web_ui() {
  echo "$LogPrefix ** Remove Web UI " >> $hdhr_log
  if [ -e $syno_web_path ]; then
  	rm -rf $syno_web_path
  fi
}

update_vars_file() {
  echo "$LogPrefix ** Update vars.php File " >> $hdhr_log
	sed -i "s!\(DVRUI_version\s*=\).*!\1\"$SYNOPKG_PKGVER\";!" $syno_web_path/vars.php
	sed -i "s!\(DVR_pkgPath\s*=\).*!\1\"$SYNOPKG_PKGDEST\";!" $syno_web_path/vars.php
	sed -i "s!\(DVR_bin\s*=\).*!\1\"$DVRBin\";!" $syno_web_path/vars.php
	sed -i "s!\(DVR_config\s*=\).*!\1\"etc/$hdhr_conf\";!" $syno_web_path/vars.php
}

create_conf_file() {
  echo "$LogPrefix ** Create Config File " >> $hdhr_log
  echo "$LogPrefix check if we have existing config file" >> $hdhr_log
	if [ ! -e  "$hdhr_etc_path/$hdhr_conf" ]; then
	  echo "$LogPrefix check if we have backup config file" >> $hdhr_log
		if [ ! -e "$SYNOPKG_TEMP_UPGRADE_FOLDER/$hdhr_conf" ]; then
		  echo "$LogPrefix Creating new Config File" >> $hdhr_log
			touch $hdhr_etc_path/$hdhr_conf 
			echo "RecordPath=$SYNOPKG_PKGDEST_VOL/$SYNOPKG_PKGNAME" >> $hdhr_etc_path/$hdhr_conf 
			echo "Port=59090" >> $hdhr_etc_path/$hdhr_conf 
			echo "RecordStreamsMax=16" >> $hdhr_etc_path/$hdhr_conf 
			echo "BetaEngine=0" >> $hdhr_etc_path/$hdhr_conf 
			echo "RunAs=$hdhr_user" >>  $hdhr_etc_path/$hdhr_conf 
		fi
	fi
}

backup_conf_file() {
  echo "$LogPrefix ** Backup Config File " >> $hdhr_log
	if [-e "$hdhr_etc_path/$hdhr_conf" ]; then
		cp $hdhr_etc_path/$hdhr_conf $SYNOPKG_TEMP_UPGRADE_FOLDER
	fi
}

restore_conf_file() {
  echo "$LogPrefix ** Restore Config File " >> $hdhr_log
	if [-e "$SYNOPKG_TEMP_UPGRADE_FOLDER/$hdhr_conf" ]; then
		cp $SYNOPKG_TEMP_UPGRADE_FOLDER/$hdhr_conf $hdhr_etc_path
	fi
  echo "$LogPrefix Confirm we have RunAs and BetaEngine in the Config File, create if not" >> $hdhr_log
	if ! grep -q "RunAs" $hdhr_etc_path/$hdhr_conf ; then
		echo "$LogPrefix Adding RunAs to conf file" >> $hdhr_log
		echo "RunAs=$HDHR_USER" >> $hdhr_etc_path/$hdhr_conf
	fi
	if ! grep -q "BetaEngine" $hdhr_etc_path/$hdhr_conf ; then
		echo "$LogPrefix Adding BetaEngine to conf file" >> $hdhr_log
		echo "BetaEngine=0" >> $hdhr_etc_path/$hdhr_conf
	fi
	
}

clear_tmp_engine() {
  echo "$LogPrefix ** Removing temporary record engine that might be sitting around" >> $hdhr_log
	rm -f /tmp/hdhomerun_*
}

create_recordings_path() {
  echo "$LogPrefix ** Create Recording Path Share" >> $hdhr_log
  echo "$LogPrefix Before creating a share - lets see if we already have config file" >> $hdhr_log
	if [ ! -e  $hdhr_etc_path/$hdhr_conf ]; then
	  echo "$LogPrefix check if we have backup config file" >> $hdhr_log
		if [ ! -e "$SYNOPKG_TEMP_UPGRADE_FOLDER/$hdhr_conf" ]; then
		  echo "$LogPrefix Check default Recording Path Share exists" >> $hdhr_log
			RECORDING_PATH="$SYNOPKG_PKGDEST_VOL/$SYNOPKG_PKGNAME"
			if [ ! -d $RECORDING_PATH ] ; then
			  echo "$LogPrefix Creating default Recording Path Share $SYNOPKG_PKGDEST_VOL/$SYNOPKG_PKGNAME " >> $hdhr_log
				$SYNO_SHARE --add $SYNOPKG_PKGNAME "" $SYNOPKG_PKGDEST_VOL/$SYNOPKG_PKGNAME "" "$hdhr_user,@administrators,@http" "" 1 0
			else
			  echo "$LogPrefix RecordingPath exists - assume share exists too, add user " >> $hdhr_log
				$SYNO_SHARE --setuser $SYNOPKG_PKGNAME RW + "$hdhr_user,@http"
			fi
		fi
	fi
}

delete_recordings_path() {
  echo "$LogPrefix ** Removing Recording Path Share" >> $hdhr_log
	echo "$LogPrefix !!! Does Nothing - leave removing the dir to the user" >> $hdhr_log
}

adjust_permissions() {
  echo "$LogPrefix ** Adjust Config File Permissions" >> $hdhr_log
	chown $hdhr_user $hdhr_etc_path/$hdhr_conf
	chgrp $http_grp $hdhr_etc_path/$hdhr_conf
	chmod 664 $hdhr_etc_path/$hdhr_conf
}

###########################
# Verifies the config file exists and ensure
# is writable so Engine can update the StorageID
#
validate_config_file()
{
   echo "$LogPrefix ** Validating the Config File is available and set up correctly" >> $hdhr_log
   if [[ -e $hdhr_etc_path/$hdhr_conf ]] ; then
      echo "$LogPrefix Config File exists and is writable - is record path and port correct" >> $hdhr_log
      .  $hdhr_etc_path/$hdhr_conf
      # TODO: Validate RecordPath
      # TODO: Validate Port
   else
      # config file is missing
      echo "$LogPrefix Config is missing" >> $hdhr_log
      exit 1
   fi
}

###########################
# Get latest Record Engine(s) from SiliconDust, and delete any previous
# Will get Beta (if enabled in conf) and released engine and compare dates
# and select the newest amnd make it the default
#
update_engine()
{
	echo "$LogPrefix ** Installing the HDHomeRunDVR Record Engine" >> $hdhr_log
	echo "$LogPrefix Lets remove any existing engine - we're going to take the latest always.... " >> $hdhr_log
	rm -f  ${RecordPath}/${DVRBin}
	echo "$LogPrefix Checking it was deleted - if we can't remove it we can't update" >> $hdhr_log
	# TODO: check file was deleted - warn if not
	echo "$LogPrefix Downloading latest release" >> $hdhr_log
	wget -qO ${RecordPath}/${DVRBin}_rel ${DownloadURL}
	if [ "$BetaEngine" -eq "1" ]; then
		echo "$LogPrefix Downloading latest beta" >> $hdhr_log
		wget -qO ${RecordPath}/${DVRBin}_beta ${BetaURL}
		echo "$LogPrefix Comparing which is newest" >> $hdhr_log
		if [[ ${RecordPath}/${DVRBin}_rel -nt  ${RecordPath}/${DVRBin}_beta ]] ; then
			echo "$LogPrefix Release version is newer - selecting as record engine" >> $hdhr_log
			mv ${RecordPath}/${DVRBin}_rel ${RecordPath}/${DVRBin}
			rm ${RecordPath}/${RecordPath}_beta
		elif [[ ${RecordPath}/${DVRBin}_rel -ot  ${RecordPath}/${DVRBin}_beta ]]; then
			echo "$LogPrefix Beta version is newer - selecting as record engine" >> $hdhr_log
			mv ${RecordPath}/${DVRBin}_beta ${RecordPath}/${DVRBin}
			rm ${RecordPath}/${DVRBin}_rel
		else
			echo "$LogPrefix Both versions are same - using the Release version" >> $hdhr_log
			mv ${RecordPath}/${DVRBin}_rel ${RecordPath}/${DVRBin}
			rm ${RecordPath}/${DVRBin}_beta
		fi
	else
			echo "$LogPrefix Skipping check for beta - using the Release version" >> $hdhr_log
			mv ${RecordPath}/${DVRBin}_rel ${RecordPath}/${DVRBin}
	fi
	if [ ! -z "${RunAs}" ] ; then
		echo "$LogPrefix Changing binary owner to ${RunAs}" >> $hdhr_log
		chown ${RunAs} ${RecordPath}/${DVRBin}
		chgrp ${http_grp} ${RecordPath}/${DVRBin}
	fi
	chmod 750 ${RecordPath}/${DVRBin}
}

start_engine() {
  echo "$LogPrefix ==========================="  >> $hdhr_log
  echo "$LogPrefix Starting Engine: $currentTS"  >> $hdhr_log
  validate_config_file
  update_engine
	if [ ! -z "${RunAs}" ] ; then
		echo "$LogPrefix Starting the recordengine as ${RunAs}" >> $hdhr_log
		sudo -u ${RunAs} ${RecordPath}/${DVRBin} start --conf $hdhr_etc_path/$hdhr_conf
	else
		echo "$LogPrefix No RunAs user - running as user_id(${CURR_USER})" >> $hdhr_log
		${RecordPath}/${DVRBin} start --conf $hdhr_etc_path/$hdhr_conf
	fi
}

stop_engine() {
  echo "$LogPrefix Stopping Engine: "  >> $hdhr_log
	.  $hdhr_etc_path/$hdhr_conf
	${RecordPath}/${DVRBin} stop
}

status_engine() {
  echo "$LogPrefix Requesting Engine Status: "  >> $hdhr_log
	.  $hdhr_etc_path/$hdhr_conf
	${RecordPath}/${DVRBin} version
	${RecordPath}/${DVRBin} status
}

